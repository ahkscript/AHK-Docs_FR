<!DOCTYPE HTML>
<html lang="fr">
<head>
<title>Scripts - Définition &amp; Utilisation | AutoHotkey</title>
<meta name="description" content="Apprendre les détails sur les scripts en général, découper les lignes longues, compiler un script, passer des paramètres de ligne de commande, page de code et débogage." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Scripts</h1>
<p>Sujets connexes :</p>
<ul>
  <li><a href="Program.htm">Utiliser le Programme</a> : Comme utiliser AutoHotkey, en général.</li>
  <li><a href="Concepts.htm">Concepts et Conventions</a> : Explication générale de différents concepts utilisés par AutoHotkey.</li>
  <li><a href="Language.htm">Language de Script</a> : Détails spécifiques sur la syntaxe (comment écrire des scripts).</li>
</ul>

<h2>Table des Matières</h2>
<ul>
  <li><a href="#intro">Introduction</a></li>
  <li><a href="#auto">Le Haut du Script (Section d'Auto-exécution)</a> : Cette partie s'exécute automatiquement au lancement du script.</li>
  <li><a href="#continuation">Diviser une Longue Ligne en une Série de Lignes Plus Courtes</a> : Ceci peut améliorer la lisibilté et la maintenabilité d'un script.</li>
  <li><a href="#ahk2exe">Convertir un Script en EXE (ahk2exe)</a> : Convertir un script .ahk en un fichier .exe qui peut être exécuté sur un PC quelconque.</li>
  <li><a href="#cmd">Passer des Paramètres de Ligne de Commande à un Script</a> : Les variables %1%, %2%, etc. contiennent les paramètres d'entrée.</li>
  <li><a href="#cp">Codepage de Fichier de Script</a> : Utiliser sans risque des caractères non-ASCII dans les scripts.</li>
  <li><a href="#debug">Déboguer un Script</a> : Trouver les problèmes dans un script au mauvais comportement.</li>
</ul>
<h2 id="intro">Introduction</h2>
<p>Chaque script est un simple fichier texte contenant les lignes à faire exécuter par le programme (AutoHotkey.exe). Un script peut aussi contenir des <a href="Hotkeys.htm">hotkeys</a> et des <a href="Hotstrings.htm">hotstrings</a>, ou même ne contenir que des hotkeys et hostrings. Toutefois, en l'absence de hotkeys et de hotstrings, un script effectuera ses commandes dans l'ordre du haut vers le bas à l'instant où il est lancé.</p>
<p>Le programme charge le script en mémoire ligne par ligne, et chaque ligne peut être constituée d'au maximum 16383 caractères. Pendant le chargement, le script est <a href="misc/Performance.htm">optimisé</a> et validé. Les erreurs de syntaxe seront affichées, et doivent être corrigées pour que le script puisse être exécuté.</p>
<h2 id="auto">Le Haut du Script (Section d'Auto-exécution)</h2>
<p>Une fois que le script a été chargé, l'exécution commence à la ligne du haut, et continue jusqu'à ce que <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, ou un <a href="Hotkeys.htm">label hotkey/hotstring</a>, ou la fin physique du script soit atteinte (selon ce qui arrive en premier). La partie en haut du script est appelée la section d'<em>auto-exécution</em>.</p>
<p class="warning"><strong>Note :</strong> Alors que le <em>premier</em> hotkey/hotstring du script a le même effet qu'un <a href="commands/Return.htm">return</a>, ce n'est pas le cas des autres hotkeys et labels.</p>
<p>Un script qui n'est pas <a href="commands/_Persistent.htm">persistant</a> et sans <a href="Hotkeys.htm">hotkeys</a>, <a href="Hotstrings.htm">hotstrings</a>, <a href="commands/OnMessage.htm">OnMessage()</a>, ni <a href="commands/Gui.htm">GUI</a> terminera après la fin de la section d'auto-exécution. Sinon, son exécution continuera dans un état de veille, et réagira aux évènements liés aux hotkeys, hotstrings, <a href="commands/Gui.htm#label">évènements de GUI</a>, <a href="commands/Menu.htm">éléments de menu personnalisé</a>, et <a href="commands/SetTimer.htm">minuteries</a>.</p>
<p>Chaque <a href="misc/Threads.htm">fil d'exécution</a> (thread) lancé par <a href="Hotkeys.htm">hotkey</a>, <a href="Hotstrings.htm">hotstring</a>, <a href="commands/Menu.htm">élément de menu</a>, <a href="commands/Gui.htm#label">évènement de GUI</a>, ou <a href="commands/SetTimer.htm">minuterie</a> démarre de zéro avec les valeurs par défaut pour les attributs suivants telles que définies dans la section d'auto-exécution. Si non spécifiées, les valeurs par défaut standards sont utilisées (ainsi que documenté sur chacune des pages suivantes) : <a href="commands/AutoTrim.htm">AutoTrim</a>, <a href="commands/CoordMode.htm">CoordMode</a>, <a href="commands/Critical.htm">Critical</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>, <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/FileEncoding.htm">FileEncoding</a>, <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/SendLevel.htm">SendLevel</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetBatchLines.htm">SetBatchLines</a>, <a href="commands/SetControlDelay.htm">SetControlDelay</a>, <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="commands/SetFormat.htm">SetFormat</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>, <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>, <a href="commands/SetRegView.htm">SetRegView</a>, <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>, <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SetWinDelay.htm">SetWinDelay</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, et <a href="commands/Thread.htm">Thread</a>.</p>
<p>Si la section d'auto-exécution prend longtemps à terminer (ou ne termine jamais), les valeurs par défaut des paramètres ci-dessus prendront effet après 100 millisecondes. Quand la section d'auto-exécution termine enfin (si elle termine), les valeurs par défaut sont mises à jour à nouveau pour être telles qu'à la fin de la section d'auto-exécution. Ainsi, il est en général mieux de faire tout changement souhaité des valeurs par défaut en haut des scripts qui contiennent des <a href="Hotkeys.htm">hotkeys</a>, <a href="Hotstrings.htm">hotstrings</a>, <a href="commands/SetTimer.htm">minuteries</a>, ou des <a href="commands/Menu.htm">éléments de menu personnalisé</a>. A noter que chaque <a href="misc/Threads.htm">fil d'exécution</a> a son propre ensemble de valeurs pour les paramètres ci-dessus. Les changements apportés à ces paramètres n'affecteront pas les autres <a href="misc/Threads.htm">fils d'exécution</a>.</p>

<h2 id="continuation">Diviser une Longue Ligne en une Série de Lignes Plus Courtes</h2>
<p>Les longues lignes peuvent être divisées en un ensemble de lignes plus courtes pour améliorer la lisibilité et la maintenabilité. Ceci ne réduit pas la vitesse d'exécution du script puisque de telles lignes sont fusionnées dans la mémoire au moment où le script est lancé.</p>
<p id="continuation-line"><strong>Méthode #1</strong> : Une ligne qui commence par "and", "or", ||, &amp;&amp;, une virgule, ou un <a href="Variables.htm#concat">point</a> est automatiquement fusionnée avec la ligne directement au-dessus (en v1.0.46+, ceci est aussi vrai pour tous les autres <a href="Variables.htm#Operators">opérateurs d'expression</a> sauf ++ et --). Dans l'exemple suivant, la seconde ligne est ajoutée à la première car elle commence par une virgule :</p>
<pre>FileAppend, Ceci est le texte à ajouter.`n   <em>; Un commentaire est autorisé ici.</em>
    , %A_ProgramFiles%\UneApplication\FichierJournal.txt  <em>; Commentaire.</em></pre>
<p>De manière similaire, les lignes suivantes seraient fusionnées en une seule puisque les deux dernières commencent avec "and" ou "or" :</p>
<pre>if (Couleur = "Rouge" or Couleur = "Vert"  or Couleur = "Bleu"   <em>; Commentaire.</em>
    <strong>or</strong> Couleur = "Noir" or Couleur = "Gris" or Couleur = "Blanc")   <em>; Commentaire.</em>
    <strong>and</strong> ProduitDisponibleDansCetteCouleur(Produit, Couleur)   <em>; Commentaire.</em></pre>
<p>L'<a href="Variables.htm#ternary">opérateur ternaire</a> est aussi un bon candidat :</p>
<pre>ProduitDisponible := (Couleur = "Rouge")
    <strong>?</strong> false  <em>; Pas de produit rouge disponible, pas besoin d'appeler la fonction.</em>
    <strong>:</strong> ProduitDisponibleDansCetteCouleur(Produit, Couleur)</pre>
<p>Bien que l'indentation utilisée dans les exemples ci-dessus soit facultative, elle peut améliorer la clarté en indiquant les lignes appartenant à celles au-dessus. Also, it is not necessary to include extra spaces for lines starting with the words "AND" and "OR"; the program does this automatically. Enfin, des lignes vides ou des <a href="Language.htm#comments">commentaires</a> peuvent être ajoutés entre les lignes, ou à la fin de chaque ligne comme dans les exemples ci-dessus.</p>
<p id="continuation-section"><strong>Méthode #2</strong> : Cette méthode devrait être utilisée pour fusionner un grand nombre de lignes ou quand les lignes ne permettent pas d'utiliser la Méthode #1. Bien que cette méthode soit surtout utile pour les <a href="Hotstrings.htm">hotstrings à remplacement automatique</a>, elle peut aussi être utilisée avec n'importe quelle commande ou <a href="Variables.htm#Expressions">expression</a>. Par exemple :</p>
<pre><em>; EXEMPLE #1 :</em>
Var =
(
Ligne 1 du texte.
Ligne 2 du texte. Par défaut, un retour à la ligne (`n) est présent entre les lignes.
)

<em>; EXEMPLE #2 :</em>
FileAppend,  <em>; La virgule est requise dans ce cas.</em>
(
Une ligne de texte.
<i>Par défaut</i>, le retour chariot automatique (Entrée) entre la ligne précédente et celle-ci sera écrite dans le fichier comme retour à la ligne (`n).
    <i>Par défaut</i>, la tabulation à gauche de cette ligne sera aussi écrite dans le fichier (même chose pour des espaces).
<i>Par défaut</i>, les références de variable comme %Var% sont résolues vers le contenu de la variable.
), C:\Mon Fichier.txt</pre>
<p>Dans les exemples ci-dessus, une série de ligne est délimitée en haut et en bas par une paire de parenthèses. Ceci est appelé une <em>section de continuation</em>. A noter que la ligne du bas contiens le dernier paramètre de <a href="commands/FileAppend.htm">FileAppend</a> après la parenthèse fermante. Faire ainsi est facultatif ; ceci est fait dans des cas similaires afin que la virgule soit vue comme un délimiteur de paramètre plutôt qu'une virgule littérale.</p>
<p>Le comportement par défaut d'une section de continuation peut être modifié en incluant une ou plus des options suivantes à droite de la parenthèse ouvrante de la section. Si plus d'une option est présente, elles sont séparées par des espaces. Par exemple : <code>( LTrim Join| %</code>.</p>
<p id="Join"><strong>Join</strong> : Indique comment les lignes devraient être jointes ensemble. Si cette option est omise, chaque ligne sauf la dernière sera suivie d'un caractère retour à la ligne (`n). Si le mot <em>Join</em> est indiqué seul, les lignes sont jointes directement sans aucun caractère entre. Sinon, le mot <em>Join</em> devrait être immédiatement suivi d'au plus 15 caractères. Par exemple, <code>Join`s</code> insèrerait un espace après chaque ligne sauf la dernière ("`s" indique un espace littéral -- il s'agit d'une séquence d'échappement spéciale reconnue seulement par <em>Join</em>). Un autre exemple est <code>Join`r`n</code>, qui insère CR+LF entre les lignes. De même, <code>Join|</code> insère unne barre verticale entre les lignes. Pour que la dernière ligne de la section soit également suivie de la chaîne de caractères indiquée à Join, inclure une ligne vide immédiatement au-dessus de la parenthèse fermante de la section.</p>
<p>Limitation connue: Si la chaîne de caractères indiquée à Join finit par un deux-points, ce ne doit pas être la dernière option sur la ligne. Par exemple, <code>(Join:</code> est vu comme le label "(Join" et <code>(LTrim Join:</code> n'est pas pris en charge, mais <code>(Join: C</code> va.</p>
<p id="LTrim"><strong>LTrim</strong> : Ignore les espaces et les tabulations au début de chaque ligne. Ceci est principalement utilisé pour permettre d'indenter dans une section de continuation. De plus, cette option peut être activée pour plusieurs sections de continuation en indiquant <code>#LTrim</code> sur une ligne séparée. <code>#LTrim</code> est positionnelle : elle affecte toutes les sections de continuation sous elle. L'option peut être désactivée avec <code>#LTrim Off</code>.</p>
<p><strong>RTrim0</strong> (RTrim suivi d'un zéro) : Désactive l'omission des espaces et tabulations à la fin de chaque ligne.</p>
<p id="CommentOption"><strong>Comments</strong> (ou <strong>Comment</strong> ou <strong>Com</strong> ou <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span> : Permet les <a href="Language.htm#comments">commentaires point-virgule</a> dans la section de continuation (mais pas <code>/*..*/</code>). De tels commentaires (ainsi que tout espace ou tabulation à leur gauche) sont entièrement ignorés dans la ligne résultante au lieu d'être traités comme du texte littéral. Chaque commentaire peut apparaître à droite d'une ligne ou seul sur une nouvelle ligne.</p>
<p><strong>%</strong> (signe pourcentage) : Traite les signes pourcentage littéralement plutôt que comme indiquant des références de variable. Ceci évite à devoir <a href="commands/_EscapeChar.htm">échapper</a> chaque signe pourcentage pour en faire un caractère littéral. Cette option n'est pas nécessaire quand les signes pourcentages sont déjà des caractères littéraux, comme pour les <a href="Hotstrings.htm">hotstrings à remplacement automatique</a>.</p>
<p><strong>,</strong> (virgule) : Traite les virgules comme des délimiteurs plutôt que des virgules littérales. Cette option rarement utilisée n'est nécessaire que pour les virgules entre paramètres de commande puisque dans les <a href="Functions.htm">appels de fonction</a>, le type de virgule n'a pas d'importance. De plus, cette option ne transforme que les virgules délimitant réellement un paramètre. En d'autres termes, une fois que le dernier paramètre de la commande est atteint (ou s'il n'y a pas de paramètres), les virgules suivantes sont traitées comme des virgules littérales sans tenir compte de cette option.</p>
<p id="accent"><strong>`</strong> (accent grave) : Traite chaque guillemet oblique littéralement plutot que comme <a href="commands/_EscapeChar.htm">caractère d'échappement</a>. Ceci empêche aussi les virgules et les signes pourcentage d'être échappés explicitement et individuellement. De plus, ceci empêche la traduction de n'importe quel séquence d'échappement indiquée explicitement comme `r et `t.</p>
<p id="non-continuation"><strong>)</strong> <span class="ver">[v1.1.01+]</span> : Si une parenthèse fermante apparaît dans les options d'une section de continuation (sauf en paramètre de l'option <a href="#Join">Join</a>), la ligne est ré-interprétée comme une expression au lieu du début d'une section de continuation. Ceci permet à des expressions comme <code>(x.y)[z]()</code> de fonctionner sans avoir à échapper la parenthèse ouvrante.</p>
<p><u>Remarques</u></p>
<p>Les <a href="commands/_EscapeChar.htm">séquences d'échappement</a> comme `n (saut de ligne) et `t (tabulation) sont pris en charge à l'intérieur de la section de continuation sauf quand l'option <a href="#accent">accent grave (`)</a> a été spécifiée.</p>
<p>Quand l'<a href="#CommentOption">option commentaire</a> est absente, les commentaires point-virgule et /*..*/ ne sont pas pris en charge dans la section de continuation puisqu'ils sont vus comme du texte littéral. Toutefois, des commentaires peuvent être inclus sur les lignes en bas et en haut de la section. Par exemple :</p>
<pre>FileAppend,   <em>; Commentaire.
; Commentaire.</em>
( LTrim Join    <em>; Commentaire.</em>
    &nbsp;; Ceci <strong>n'est pas</strong> un commentaire ; ceci est littéral. Ajouter le mot <i>Comments</i> dans la ligne ci-dessus pour faire de ceci un commentaire.
), C:\Fichier.txt   <em>; Commentaire.</em></pre>
<p>En conséquence, les point-virgules n'ont pas à être <a href="commands/_EscapeChar.htm">échappés</a> dans une section de continuation.</p>
<p>Une section de continuation ne peut pas produire une ligne dont la longueur totale dépasse 16383 caractères (si cela arrive, le programme émet une alerte au moment de lancer le script). Une manière de contourner ce problème est d'effectuer une série de concaténations dans une variable. Par exemple :</p>
<pre>Var =
(
...
)
Var = %Var%`n  <em>; Ajouter plus de texte à la variable via une autre section de continuation.</em>
(
...
)
FileAppend, %Var%, C:\Mon Fichier.txt</pre>
<p>Puisqu'une parenthèse fermante indique la fin d'une section de continuation, pour avoir une ligne commençant par une parenthèse fermante littérale, la précéder d'un accent grave/guillemet oblique : <code>`)</code>.</p>
<p>Une section de continuation peut être suivie immédiatement d'une ligne contenant la parenthèse ouvrante d'une autre section de continuation. Ceci permet aux options mentionnées plus haut de varier lors de la construction d'une ligne.</p>
<p>La construction par morceaux d'une section de continuation en utilisant <a href="commands/_Include.htm">#Include</a> n'est pas prise en charge.</p>

<h2 id="ahk2exe">Convertir un Script en EXE (ahk2exe)</h2>
<p>Un compilateur de script (merci à fincs) est inclus avec le programme.</p>
<p>Une fois qu'un script est compilé, il devient un exécutable indépendant ; c'est-à-dire que AutoHotkey.exe n'est pas requis pour exécuter le script. Le processus de compilation créé un fichier exécutable qui contient : l'interpréteur AutoHotkey, le script, tout fichier que le script <a href="commands/_Include.htm">inclut</a>, et tout fichier incorporé via la commande <a href="commands/FileInstall.htm">FileInstall</a>.</p>
<p>Ahk2Exe peut être utilisé des manières suivantes :</p>
<ol>
  <li><strong>Interface GUI</strong> : Lancer l'option "Convert .ahk to .exe" (Convertir .ahk en .exe) dans le Menu Démarrer.</li>
  <li><strong>Clic droit</strong> : Dans une fenêtre de l'explorateur de fichier, il est possible de clic droit tout fichier .ahk et de choisir "Compile Script" (Compiler le Script) (seulement disponible si l'option compilateur de script a été choisie à l'installation de AutoHotkey). Ceci créé un fichier EXE de même nom de fichier de base que le script, qui apparaît après un court instant dans le même dossier. Note : Le fichier EXE est généré avec les mêmes icône personnalisée, fichier .bin et utilise le paramètre <a href="#mpress">MPRESS</a> ayant été utilisés la dernière fois par la Méthode #1 ci-dessus.</li>
  <li id="ahk2exeCmd"><strong>Ligne de Commande</strong> : Le compilateur peut être exécuté depuis la ligne de commande avec les paramètres suivants :
  <pre class="no-highlight">Ahk2Exe.exe /in MonScript.ahk [/out MonScript.exe] [/icon MonIcone.ico] [/bin AutoHotkeySC.bin] [/mpress 0ou1]</pre>
  Par exemple :
<pre class="no-highlight">Ahk2Exe.exe /in "MonScript.ahk" /icon "MonIcone.ico"</pre>
Utilisation :
<ul>
<li>Les paramètres contenant des espaces doivent être entourés de guillemets.</li>
<li>Si le fichier de sortie "out" est omis, l'EXE aura le même nom de fichier de base que le script.</li>
</ul></li>
</ol>
<p>Notes :</p>
<ul>
  <li>La compilation n'améliore en général pas la performance d'un script.</li>
  <li>A partir de v1.1.01, la protection par mot de passe et le commutateur /NoDecompile ne sont plus pris en charge.</li>
  <li>Les commandes <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> et "<a href="commands/Menu.htm">Menu, Tray, ShowMainWindow</a>" affectent le comportement des scripts compilés.</li>
  <li>Des informations de version personnalisées (comme vu dans les paramètres de fichier dans l'explorateur) peuvent être ajoutées aux scripts compilés en utilisant un utilitaire tel que <a href="http://www.angusj.com/resourcehacker/">Resource Hacker</a> (logiciel gratuit) pour modifier le fichier "AutoHotkeySC.bin". Ce fichier est contenu dans le sous-dossier "Compiler" où AutoHotkey a été installé. <a href="https://github.com/mercury233/compile-ahk">Compile AHK</a> peut être utilisé pour faciliter ce processus. A partir de v1.1.01, le script compilé peut être modifié à la place de AutoHotkeySC.bin.</li>
  <li>La méthode ci-dessus peut aussi être utilisée pour changer des icônes existantes ou en ajouter à tout script compilé.</li>
  <li>La variable intégrée A_IsCompiled contient 1 si le script est exécuté sous forme compilée. Dans le cas contraire, elle est vide.</li>
  <li>Quand des paramètres sont donnés à Ahk2Exe, un message indicatif du succès ou de l'échec de la compilation est écrit dans stdout (sortie standard). Bien que le message n'apparaisse pas dans le terminal, il peut être "attrapé" par des méthodes telles que la redirection de la sortie vers un fichier. <span class="ver">[v1.0.43+]</span></li>
  <li>De plus en cas d'échec, Ahk2Exe a des codes de sortie indiquant le type d'erreur s'étant produite. Ces codes d'erreur peuvent être trouvés ici : <a href="https://github.com/fincs/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>. <span class="ver">[v1.1.22.03+]</span></li>
</ul>
<p>Le code source du compilateur et des versions plus récentes peuvent être trouvées sur <a href="https://github.com/fincs/Ahk2Exe">GitHub</a>.</p>

<h3 id="mpress">Compression de Scripts Compilés</h3>
<p>Ahk2Exe utilise MPRESS de manière facultative (un logiciel gratuit par MATCODE Software) pour compresser les scripts compilés. Si <strong>mpress.exe</strong> est présent dans le sous-dossier "Compiler" où AutoHotkey a été installé, il est utilisé automatiquement à moins d'être désactivé avec <code>/mpress 0</code> ou le paramètre de l'interface graphique. </p>
<p>Site web officiel (hors-ligne en Mars 2016) : <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a></p>
<p>Mirroir (téléchargements et information) : <a href="https://www.autohotkey.com/mpress/">https://www.autohotkey.com/mpress/</a></p>
<p><strong>Note :</strong> Bien que la compression du script exécutable empêche d'explorer simplement le code source du script avec un éditeur de texte brut comme Notepad ou un éditeur de ressource PE, elle n'empêche pas le code source d'être extrait par des outils spécifiques.</p>

<h2 id="cmd">Passer des Paramètres de Ligne de Commande à un Script</h2>
<p>Les scripts prennent en charge les paramètres de ligne de commande. La syntaxe est :</p>
<pre>AutoHotkey.exe [<i>Commutateurs</i>] [<i>Nom de Fichier du Script</i>] [<i>Paramètres du Script</i>]</pre>
<p>Et pour les scripts compilés, la syntaxe est :</p>
<pre>CompiledScript.exe [<i>Commutateurs</i>] [<i>Paramètres du Script</i>]</pre>
<p><strong>Commutateurs :</strong> Zéro ou plus des commutateurs suivants :</p>
<table class="info">
  <tr><th>Commutateur</th><th>Signification</th><th>Fonctionne en compilé?</th></tr>
  <tr id="SlashF">
    <td>/f ou /force</td>
    <td>Exécuter inconditionnellement, et ignorer tout message d'avertissement. Ceci a le même effet que <a href="commands/_SingleInstance.htm">#SingleInstance Off</a>.</td>
    <td>Oui</td>
  </tr>
  <tr id="SlashR">
    <td>/r ou /restart</td>
    <td>Indique que le script est redémarré (ceci est aussi utilisé par la commande <a href="commands/Reload.htm">Reload</a>, en interne).</td>
    <td>Oui</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut</td>
    <td>Envoie les erreurs de syntaxe empêchant le lancement d'un script à stderr au lieu d'afficher une boîte de dialogue. Voir <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> pour les détails. Ceci peut être combiné avec /iLib pour valider le script sans l'exécuter.</td>
    <td>Oui</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td><span class="ver">[AHK_L 11+] :</span> Se connecter à un client de débogage. Pour plus de détails, voir <a href="#idebug">Débogage Interactif</a>.</td>
    <td>Non</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td><span class="ver">[AHK_L 51+] :</span> Remplace la page de code (codepage) par défaut utilisée pour lire les fichiers de script. Pour plus de détails, voir <a href="#cp">Codepage de Fichier de Script</a>.</td>
    <td>Non</td>
  </tr>
  <tr>
    <td>/iLib <em>"FichierSortie"</em></td>
    <td>
      <p><span class="ver">[v1.0.47+] :</span> AutoHotkey charge le script mais ne l'exécute pas. Pour chaque fichier de script auto-inclus via <a href="Functions.htm#lib">le mécanisme de bibliothèque</a>, deux lignes sont écrites dans le fichier spécifié par <em>FichierSortie</em>. Ces lignes sont écrites dans la syntaxe suivante, où <em>DossierBibli</em> est le chemin complet du dossier de la bibliothèque et <em>FichierBibli</em> est le nom de fichier de la bibliothèque :</p>
<pre>#Include DossierBibli\
#IncludeAgain DossierBibli\FichierBibli.ahk</pre>
      <p>Si le fichier de sortie existe, il est remplacé. <em>FichierSortie</em> peut être <code>*</code> pour écrire la sortie dans stdout.</p>
      <p>Si le script contient des erreurs de syntaxe, le fichier de sortie peut être vide. Le code de sortie du processus peut être utilisé pour détecter ce cas ; s'il y a une erreur de syntaxe, le code de sortie est 2. Le commutateur /ErrorStdOut peut être utilisé pour supprimer ou capturer le message d'erreur.</p>
    </td>
    <td>Non</td>
  </tr>
</table>

<p id="defaultfile"><strong>Nom de Fichier du Script :</strong> Ceci peut être omis si il n'y a pas de <em>Paramètres de Script</em>. Si omis (par exemple si AutoHotkey est exécuté directement depuis le menu Démarrer), le programme cherche un fichier de script appelé <code><i>AutoHotkey</i>.ahk</code> dans les endroits suivants, dans cet ordre :</p>
<ul>
  <li>Le dossier qui contient l'<a href="Variables.htm#AhkPath">exécutable AutoHotkey</a>.</li>
  <li>Le dossier <a href="Variables.htm#MyDocuments">Documents</a> de l'utilisateur actuel.</li>
</ul>
<p>Le nom de fichier <code><i>AutoHotkey</i>.ahk</code> dépend du nom de l'exécutable utilisé pour lancer le script. Par exemple, en renommant AutoHotkey.exe en MonScript.exe, le programme cherchera <code>MonScript.ahk</code>. Si AutoHotkeyU32.exe est lancé sans paramètres, il cherchera AutoHotkeyU32.ahk.</p>
<p>Note : Dans de vieilles versions avant la <a href="AHKL_ChangeLog.htm#L51">révision 51</a>, le programme cherchait AutoHotkey.ini dans le répertoire de travail ou AutoHotkey.ahk dans Mes Documents.</p>
<p><span class="ver">[v1.1.17+] :</span> Indiquer un astérisque (*) pour le nom de fichier pour que le texte du script soit lu depuis l'entrée standard (stdin). Pour un exemple, voir <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p id="cmd_args"><strong>Paramètres du Script :</strong> Le(s) chaîne(s) de caractères à passer au script, chacune séparée de la suivante par un espace. Tout paramètre contenant des espaces doit être entouré de guillemets. Un guillemet littéral peut être passé en le précédant d'un antislash (\"). En conséquence, tout antislash terminant un paramètre entre guillemets (comme "C:\Mes Documents<span class="red">\"</span>) est traité comme un guillemet littéral (c'est-à-dire, le script recevrait la chaîne de caractères C:\My Documents<span class="red">"</span>). Pour enlever de tels guillemets, utiliser <code><a href="commands/StringReplace.htm">StringReplace</a>, 1, 1, <span class="red">"</span>,, All</code>.</p>
<p><span class="ver">[v1.1.27+] :</span> Les paramètres d'entrée, si présents, sont stockés sous forme de tableau dans la variable intégrée <strong>A_Args</strong>, et peuvent être obtenus en utilisant la <a href="Objects.htm#Usage_Simple_Arrays">syntaxe de tableau</a>. <code>A_Args[1]</code> contient le premier paramètre. L'exemple suivant termine le script quand un nombre insuffisant de paramètres lui est passé :</p>
<pre>if A_Args.Length() &lt; 3
{
    MsgBox % "Ce script nécessite au moins 3 paramètres mais n'en a reçu que " A_Args.Length() "."
    ExitApp
}</pre>
<p>Si le nombre de paramètres passés à un script est variable (par exemple l'utilisateur glisse-dépose un ensemble de fichiers sur un script), l'exemple suivant peut être utilisé pour les extraire un par un :</p>
<pre>for n, param in A_Args  <em>; Pour chaque paramètre :</em>
{
    MsgBox Le paramètre numéro %n% est %param%.
}
</pre>
<p>Si les paramètres sont des noms de fichier, l'exemple suivant peut être utilisé pour les convertir en leurs noms longs avec casse corrigée (tel que stocké dans le système de fichier), comprenant le chemin complet/absolu :</p>
<pre>for n, CheminDonné in A_Args  <em>; Pour chaque paramètre (ou fichier déposé sur un script):</em>
{
    Loop Files, %CheminDonné%, FD  <em>; Include files and directories.</em>
        CheminLong := A_LoopFileFullPath
    MsgBox Le chemin long avec casse corrigée du fichier`n%CheminDonné%`nest :`n%CheminLong%
}</pre>
<p><strong>Problème connu :</strong> déposer des fichiers sur un script .ahk peut échouer à fonctionner correctement si les noms (courts) 8-dot-3 ont été désactivé dans un système de fichier NTFS. Une solution est de <a href="#ahk2exe">compiler</a> le script puis de déposer les fichiers sur l'EXE résultant.</p>
<p id="cmd_args_old"><strong>Dépassé :</strong> Les paramètres de ligne de commande sont aussi stockés dans les <a href="Variables.htm">variables</a> %1%, %2%, et ainsi de suite, comme dans les versions précédant <span class="ver">[v1.1.27]</span>. De plus, %0% contient le nombre de paramètres passés (0 si aucun). Toutefois, ces variables ne peuvent pas être utilisées directement dans une expression puisqu'elles seraient interprétées comme des nombres plutôt que comme des variables. L'exemple suivant termine le script quand un nombre insuffisant de paramètres lui est passé :</p>
<pre>if 0 &lt; 3  <em>; Le côté gauche d'une <a href="commands/IfEqual.htm">instruction if non-expression</a> est toujours le nom d'une variable.</em>
{
    MsgBox Ce script nécessite au moins 3 paramètres d'entrée mais n'en a reçu que %0%.
    ExitApp
}</pre>
<p>Si le nombre de paramètres passés à un script est variable (par exemple l'utilisateur glisse-dépose un ensemble de fichiers sur un script), l'exemple suivant peut être utilisé pour les extraire un par un :</p>
<pre>Loop, %0%  <em>; Pour chaque paramètre :</em>
{
    param := %A_Index%  <em>; Récupérer le contenu de la variable dont le nom est contenu dans A_Index.</em>
    MsgBox, 4,, Le paramètre numéro %A_Index% est %param%.  Continuer ?
    IfMsgBox, No
        break
}</pre>
<p>Si les paramètres sont des noms de fichier, l'exemple suivant peut être utilisé pour les convertir en leurs noms longs avec casse corrigée (tel que stocké dans le système de fichier), comprenant le chemin complet/absolu :</p>
<pre>Loop %0%  <em>; Pour chaque paramètre (ou fichier déposé sur un script):</em>
{
    CheminDonné := %A_Index%  <em>; Récupérer le contenu de la variable dont le nom est contenu dans A_Index.</em>
    Loop %CheminDonné%, 1
        CheminLong := A_LoopFileLongPath
    MsgBox Le chemin long avec casse corrigée du fichier`n%CheminDonné%`nest :`n%CheminLong%
}</pre>

<h2 id="cp">Codepage de Fichier de Script <span class="ver">[AHK_L 51+]</span></h2>
<p>Les caractères qu'un fichier de script peut contenir sont restreints par la page de caractère (codepage) utilisée pour charger le fichier.</p>
<ul>
  <li>Si le fichier commence par un indicateur d'ordre des octets (Byte Order Mark) UTF-8 ou UTF-16 (LE), le codepage approprié est utilisé et le commutateur <a href="#CPn">/CP<i>n</i></a> est ignoré.</li>
  <li>Si le commutateur <a href="#CPn">/CP<i>n</i></a> est passé en ligne de commande, le codepage <i>n</i> est utilisé. Pour une liste des identificateurs numériques valides de codepage, voir <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
  <li>Dans tous les autres cas, le codepage par défaut du système ANSI est utilisé.</li>
</ul>
<p>A noter que ceci ne s'applique qu'aux fichiers chargés par AutoHotkey, pas aux opérations d'entrée-sortie effectuées sur des fichiers au sein du script même. <a href="commands/FileEncoding.htm">FileEncoding</a> contrôle l'encodage par défaut des fichiers lus ou écrits par le script, tandis que <a href="commands/IniRead.htm">IniRead</a> et <a href="commands/IniWrite.htm">IniWrite</a> utilisent toujours UTF-16 ou ANSI.</p>
<p>Comme tout le texte est converti (si nécessaire) vers le <a href="Compat.htm#Format">format natif de chaîne de caractères</a>, les caractères qui sont invalides ou n'existent pas dans le codepage natif sont remplacés par : en ANSI '?' ou en Unicode '�'. Dans les constructions (builds) Unicode, ceci ne devrait arriver qu'en cas d'erreur d'encodage dans le fichier de script ou si les codepages utilisés pour la sauvegarde et le chargement du fichier sont différents.</p>
<p><a href="commands/RegWrite.htm">RegWrite</a> peut être utilisée pour définir le codepage par défaut pour les scripts lancés depuis l'explorateur (par exemple en double-cliquant un fichier) :</p>
<pre><em>; Décommenter la ligne appropriée ci-dessous ou les laisser toutes
;   commentées pour revenir au codepage par défaut de la construction ;   actuelle. Modifier selon le besoin :
; codepage := 0        ; Codepage par défaut du système ANSI
; codepage := 65001    ; UTF-8
; codepage := 1200     ; UTF-16
; codepage := 1252     ; ANSI Latin 1; Europe de l'Ouest (Windows)</em>
if (codepage != "")
    codepage := " /CP" . codepage
cmd="%A_AhkPath%"%codepage% "`%1" `%*
key=AutoHotkeyScript\Shell\Open\Command
if A_IsAdmin    <em>; Modifer pour tous les utilisateurs.</em>
    RegWrite, REG_SZ, HKCR, %key%,, %cmd%
else            <em>; Modifer pour l'utilisateur actuel seulement.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%key%,, %cmd%</pre>
<p>Ceci suppose que AutoHotkey a déjà été installé. Le résultat peut être loin d'être idéal dans le cas contraire.</p>

<h2 id="debug">Déboguer un Script</h2>
<p>Des commandes comme <a href="commands/ListVars.htm">ListVars</a> et <a href="commands/Pause.htm">Pause</a> peuvent aider à déboguer script. Par exemple, les deux lignes suivantes, insérées temporairement à des endroits choisis soigneusement, crééent des "points d'arrêt" dans le script :</p>
<pre>ListVars
Pause</pre>
<p>Quand le script rencontre ces deux lignes, il affiche le contenu actuel de toutes les variables pour inspection. Une fois prêt à reprendre l'exécution, la pause du script peut être enlevée via le menu fichier ou zone de notification. Le script continuera ensuite jusqu'à atteindre le prochain "point d'arrêt" (s'il y en a un).</p>
<p>Il est en général mieux d'insérer ces "points d'arrêt" à des positions où la fenêtre active n'a pas d'influence sur le script, comme par exemple immédiatement avant une commande WinActivate. Ceci permet au script de reprendre correctement ses opérations quand la pause est enlevée.</p>
<p>Les commandes suivantes sont aussi utiles pour le débogage : <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a>, et <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>Certaines erreurs courantes, comme des fautes de frappes et des déclarations manquantes de "globales", peuvent être détectées en <a href="commands/_Warn.htm">activant les avertissements</a>.</p>
<h3 id="idebug">Débogage Interactif <span class="ver">[AHK_L 11+]</span></h3>
<p>Le débogage interactif est possible avec un <a href="AHKL_DBGPClients.htm">client DBGp</a> pris en charge. Typiquement, les actions suivantes sont possibles :</p>
<ul>
  <li>Ajouter et enlever des points d'arrêt sur des lignes - met en pause l'exécution quand un <a href="https://fr.wikipedia.org/wiki/Point_d%27arr%C3%AAt_(informatique)">point d'arrêt</a> est atteint.</li>
  <li>Exécuter le code ligne par ligne - entrer dans, survoler ou sortir de fonctions et sous-programmes.</li>
  <li>Inspecter toutes les variables ou une variable en particulier.</li>
  <li>Voir la pile des sous-programmes et fonctions en cours d'exécution.</li>
</ul>
<p>A noter que cette fonctionnalité est désactivée pour les scripts compilés.</p>
<p>Pour activer le débogage interactif, commencer par lancer un client débogueur pris en charge puis exécuter le script avec le commutateur de ligne de commande <b>/Debug</b>.</p>
<pre class="Syntax">AutoHotkey.exe /Debug<span class="optional">=<i>SERVEUR</i>:<i>PORT</i></span> ...</pre>
<p><i>SERVEUR</i> et <i>PORT</i> peuvent être omis. Par exemple, les lignes suivantes sont équivalentes :</p>
<pre class="no-highlight">AutoHotkey /Debug "monscript.ahk"
AutoHotkey /Debug=localhost:9000 "monscript.ahk"</pre>
<p id="debug_attach"><span class="ver">[AHK_L 59+] :</span> Pour attacher le débogueur à un script déjà en cours d'exécution, lui envoyer un message comme montré ci-dessous :</p>
<pre>CheminScript := "" <em>; METTRE ICI LE CHEMIN COMPLET DU SCRIPT</em>
DetectHiddenWindows On
if WinExist(CheminScript " ahk_class AutoHotkey")
    <em>; Paramètres facultatifs :
    ;   wParam  = l'adresse IPv4 du client débogueur, comme entier 32-bit.
    ;   lParam  = le port sur lequel le client débogueur écoute.</em>
    PostMessage DllCall("RegisterWindowMessage", "str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>Une fois le client débogueur connecté, il peut se détacher sans terminer le script en envoyant la commande DBGp "detach".</p>

<h2>Vitrine de Scripts</h2>
<p>Voir <a href="scripts/">cette page</a> pour des scripts utiles.</p>
</body>
</html>
